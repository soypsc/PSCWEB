<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SGL - PSC v1.9 (Conectado a Google Sheets)</title>
    <script src='https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.min.js'></script>
    <script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>
    
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Estilo para el scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f8fafc;
        }
        ::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }
        .sidebar-link.active {
            background-color: #ecfdf5; /* Verde muy claro */
            color: #059669; /* Verde esmeralda */
            font-weight: 600;
        }
        .sidebar-link.active svg {
            color: #059669;
        }
        .code {
            font-size: 13px;
            font-weight: 600;
            color: #94a3b8; /* slate-400 */
            margin-right: 12px;
            background-color: #f1f5f9; /* slate-100 */
            padding: 2px 8px;
            border-radius: 6px;
            user-select: none;
        }
        .form-section {
            transition: all 0.5s ease-in-out;
            max-height: 0;
            opacity: 0;
            overflow: hidden;
            transform: translateY(-10px);
        }
        .form-section.visible {
            max-height: 1000px; /* Suficientemente grande */
            opacity: 1;
            transform: translateY(0);
            margin-top: 1.5rem; /* 24px */
        }
        .advanced-filters {
            transition: all 0.3s ease-in-out;
            max-height: 0;
            opacity: 0;
            overflow: hidden;
        }
        .advanced-filters.visible {
             max-height: 500px;
             opacity: 1;
             margin-top: 1rem;
        }
        .modal-backdrop {
            transition: opacity 0.3s ease-in-out;
        }
        .modal-content {
            transition: all 0.3s ease-in-out;
        }
        /* Estilos para el Toggle Switch */
        .toggle-checkbox:checked {
            right: 0;
            border-color: #10b981;
        }
        .toggle-checkbox:checked + .toggle-label {
            background-color: #10b981;
        }
        /* Ocultar contenido por defecto */
        .tab-content, .main-tab-content, .actions-panel {
            display: none;
        }
        /* Estilos para el Escáner */
        #video-feed, #barcode-reader {
            border: 2px solid #e5e7eb;
            border-radius: 0.5rem;
            width: 100%;
            background-color: #000;
        }
    </style>
</head>
<body class="bg-slate-50 text-slate-800">

    <div id="login-screen" class="flex items-center justify-center h-screen bg-slate-100">
        <div class="w-full max-w-md p-8 space-y-8 bg-white rounded-2xl shadow-lg">
            <div class="flex flex-col items-center">
                <div class="bg-emerald-500 p-3 rounded-xl mb-4">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                    </svg>
                </div>
                <h1 class="text-3xl font-bold text-slate-800">SGL - PSC</h1>
                <p class="text-slate-500 mt-1">Bienvenido de vuelta</p>
            </div>
            <form id="login-form" class="space-y-6">
                <div>
                    <label for="username" class="block text-sm font-medium text-slate-600 mb-1">Usuario</label>
                    <input id="username" name="username" type="text" required class="w-full p-3 border border-slate-300 rounded-md focus:ring-emerald-500 focus:border-emerald-500" value="Alvin">
                </div>
                <div>
                    <label for="password" class="block text-sm font-medium text-slate-600 mb-1">Contraseña</label>
                    <input id="password" name="password" type="password" required class="w-full p-3 border border-slate-300 rounded-md focus:ring-emerald-500 focus:border-emerald-500" value="12345">
                </div>
                <p id="login-error" class="text-sm text-red-600 text-center hidden">Usuario o contraseña incorrectos.</p>
                <button type="submit" class="w-full py-3 px-4 bg-emerald-500 text-white font-bold rounded-md shadow-lg shadow-emerald-500/20 hover:bg-emerald-600 transition-all">Iniciar Sesión</button>
            </form>
        </div>
    </div>

    <div id="main-app" class="flex h-screen hidden">
        <aside class="w-64 bg-white text-slate-600 flex flex-col p-4 fixed h-full border-r border-slate-200">
            <div class="flex items-center gap-3 mb-8 px-2">
                <div class="bg-emerald-500 p-2 rounded-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                    </svg>
                </div>
                <h1 class="text-xl font-bold text-slate-800">SGL - PSC</h1>
            </div>
            
            <nav id="main-nav" class="flex-grow space-y-1">
              </nav>

            <div class="mt-auto">
                <div class="flex items-center gap-3 p-2 rounded-lg transition-colors hover:bg-slate-100">
                    <img src="https://placehold.co/40x40/059669/FFFFFF?text=A" alt="Avatar" class="rounded-full" onerror="this.onerror=null;this.src='https://placehold.co/40x40/e2e8f0/64748b?text=A';">
                    <div>
                        <p id="session-username" class="font-semibold text-slate-800"></p>
                        <a href="#" id="logout-btn" class="text-xs text-slate-500 hover:text-emerald-500">Cerrar sesión</a>
                    </div>
                </div>
            </div>
        </aside>

        <main class="flex-1 ml-64 p-8 overflow-y-auto">
            <div id="content" class="w-full mx-auto">
                </div>
        </main>
    </div>

    <div id="custom-alert" class="fixed inset-0 bg-slate-900/50 backdrop-blur-sm flex items-center justify-center p-4 hidden z-50">
        <div class="bg-white w-full max-w-md rounded-lg shadow-xl p-6 text-center">
            <p id="custom-alert-message" class="text-slate-700 mb-4">Mensaje de alerta.</p>
            <button id="custom-alert-close" class="bg-emerald-500 text-white font-semibold py-2 px-6 rounded-md hover:bg-emerald-600">Entendido</button>
        </div>
    </div>

<script>
    // ===================================================================================
    //  SECCIÓN DE CONEXIÓN A GOOGLE SHEETS
    // ===================================================================================
    
    // ¡IMPORTANTE! Pega aquí la URL que obtuviste al implementar tu Google Apps Script.
    const API_URL = 'https://script.google.com/macros/s/AKfycbyHo3XquFelyh0di5DJJJNaZwZTFGqoF3g9qzcnA59mgM0Ji9BSXBfEivKW2Q-c7NsTZA/exec';
    
    // --- MINI BASE DE DATOS (AHORA DINÁMICA) ---
    let db = {
        users: [],
        clients: [],
        packages: [],
        sucursales: []
    };
    
    // --- FUNCIÓN PARA CARGAR DATOS DESDE GOOGLE SHEETS ---
    async function loadInitialData() {
        const loadingEl = document.getElementById('login-error');
        loadingEl.textContent = 'Cargando datos del sistema...';
        loadingEl.classList.remove('hidden', 'text-red-600');
        loadingEl.classList.add('text-slate-500');

        try {
            // Hacemos la petición GET a nuestra API para obtener todos los datos
            const response = await fetch(`${API_URL}?action=getAllData`);
            if (!response.ok) {
                throw new Error('Error al cargar los datos desde la API.');
            }
            const dataFromSheet = await response.json();
            db = dataFromSheet;
            console.log('Base de datos cargada desde Google Sheets!', db);
            loadingEl.classList.add('hidden'); // Ocultar mensaje al terminar
        } catch (error) {
            console.error(error);
            loadingEl.textContent = 'Error fatal: No se pudieron cargar los datos.';
            loadingEl.classList.add('text-red-600');
            showAlert('Error fatal: No se pudieron cargar los datos del sistema. Revisa la conexión con la API y que la URL sea correcta.');
        }
    }
    
    // --- FUNCIÓN PARA GUARDAR DATOS EN GOOGLE SHEETS ---
    async function saveData(action, data) {
        try {
            const response = await fetch(`${API_URL}?action=${action}`, {
                method: 'POST',
                // Google Apps Script a veces da problemas con CORS. 'no-cors' es una solución simple para enviar datos.
                // La desventaja es que no podemos leer la respuesta del servidor, pero la operación se ejecuta.
                mode: 'no-cors', 
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            return { status: 'success' };
        } catch(error) {
            console.error('Error al guardar:', error);
            return { status: 'error', message: error.message };
        }
    }


    // ===================================================================================
    //  RESTO DE LA LÓGICA DE LA APLICACIÓN (SIN CAMBIOS SIGNIFICATIVOS)
    // ===================================================================================

    // --- SESIÓN ---
    let session = {
        user: null
    };

    const contentEl = document.getElementById('content');
    const loginScreen = document.getElementById('login-screen');
    const mainApp = document.getElementById('main-app');
    const loginForm = document.getElementById('login-form');
    const loginError = document.getElementById('login-error');
    const logoutBtn = document.getElementById('logout-btn');
    const sessionUsernameEl = document.getElementById('session-username');
    const mainNavEl = document.getElementById('main-nav');

    // --- Custom Alert Function ---
    function showAlert(message) {
        const alertBox = document.getElementById('custom-alert');
        const messageEl = document.getElementById('custom-alert-message');
        const closeBtn = document.getElementById('custom-alert-close');
        
        messageEl.textContent = message;
        alertBox.classList.remove('hidden');
        
        closeBtn.onclick = () => {
            alertBox.classList.add('hidden');
        };
    }

    // --- LÓGICA DE LOGIN Y SESIÓN ---
    loginForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const username = e.target.username.value;
        const password = e.target.password.value;
        
        // La lógica de búsqueda ahora usa los datos cargados desde Google Sheets
        const user = db.users.find(u => u.username === username && u.password == password); // Usar == por si el número se lee como texto

        if (user) {
            session.user = user;
            loginScreen.classList.add('hidden');
            mainApp.classList.remove('hidden');
            sessionUsernameEl.textContent = session.user.username;
            buildSidebar();
            window.location.hash = '/dashboard';
            router();
            loginError.classList.add('hidden');
        } else {
            loginError.textContent = 'Usuario o contraseña incorrectos.';
            loginError.classList.remove('hidden');
        }
    });

    logoutBtn.addEventListener('click', (e) => {
        e.preventDefault();
        session.user = null;
        window.location.hash = '';
        mainApp.classList.add('hidden');
        loginScreen.classList.remove('hidden');
    });


    // --- LÓGICA DE FORMULARIOS INTERACTIVOS ---
    
    function initializeRecibirPaqueteListeners() {
        const trackingInput = document.getElementById('tracking-main');
        const casilleroInput = document.getElementById('casillero');
        const step2 = document.getElementById('step2');
        const step3 = document.getElementById('step3');
        const weightInfo = document.getElementById('weight-info');

        trackingInput.addEventListener('blur', () => {
            const pkg = db.packages.find(p => p.tracking.toUpperCase() === trackingInput.value.trim().toUpperCase());
            if (pkg) {
                weightInfo.textContent = `Peso Registrado: ${pkg.weight} lbs`;
                weightInfo.classList.remove('hidden');
            } else {
                weightInfo.classList.add('hidden');
            }
            
            if (trackingInput.value.trim() !== '') {
                step2.classList.add('visible');
            } else {
                step2.classList.remove('visible');
                step3.classList.remove('visible');
            }
        });

        casilleroInput.addEventListener('blur', () => {
            const inputValue = casilleroInput.value.trim().toUpperCase();
            let client = db.clients.find(c => c.box.toUpperCase() === inputValue);
            if (!client) {
                client = db.clients.find(c => c.name.toUpperCase() === inputValue);
            }
            
            const colorDot = document.getElementById('sucursal-color-dot');
            colorDot.className = 'h-4 w-4 rounded-full transition-colors'; // Reset classes

            if (client) {
                casilleroInput.value = client.box;
                document.getElementById('cliente').value = client.name;
                document.getElementById('sucursal').value = client.sucursal;
                colorDot.classList.add(client.sucursalColor || 'bg-slate-200');
                step3.classList.add('visible');
            } else {
                document.getElementById('cliente').value = 'Cliente no encontrado';
                document.getElementById('sucursal').value = '';
                colorDot.classList.add('bg-slate-200');
                step3.classList.add('visible'); // Permitir avanzar aunque el cliente sea nuevo
            }
        });
        
        initializeAllScanners();

        // --- NUEVA LÓGICA PARA GUARDAR EN GOOGLE SHEETS ---
        const registrarBtn = document.querySelector('#step3 button');
        if (registrarBtn) {
            registrarBtn.addEventListener('click', async () => {
                const tracking = document.getElementById('tracking-main').value.trim();
                const casillero = document.getElementById('casillero').value.trim();
                const client = db.clients.find(c => c.box === casillero);
                
                if (!tracking || !client) {
                    showAlert('Faltan datos de Tracking o el Cliente no es válido.');
                    return;
                }

                const newPackage = {
                    id: `pkg-${Date.now()}`, // ID único simple
                    tracking: tracking,
                    status: 'En Sucursal',
                    clientId: client.id,
                    sucursal: client.sucursal,
                    anaquel: '', // Asignar después
                    weight: document.getElementById('peso-paquete')?.value || 0, // Necesitarás añadir este campo
                    value: document.getElementById('valor-paquete')?.value || 0,  // y este
                    isMaritime: document.getElementById('es-maritimo')?.checked || false, // y este
                    date: new Date().toISOString().split('T')[0],
                    invoice: null
                };

                registrarBtn.textContent = 'Guardando...';
                registrarBtn.disabled = true;

                const result = await saveData('addPackage', newPackage); // 'addPackage' debe coincidir con la acción en Apps Script

                if (result.status === 'success') {
                    showAlert('¡Paquete registrado con éxito en Google Sheets!');
                    // Opcional: Recargar los datos o añadirlo localmente para que se vea al instante
                    db.packages.push(newPackage);
                    document.getElementById('tracking-main').value = '';
                    document.getElementById('casillero').value = '';
                    document.getElementById('cliente').value = '';
                    document.getElementById('sucursal').value = '';
                    step2.classList.remove('visible');
                    step3.classList.remove('visible');
                } else {
                    showAlert(`Error al guardar: ${result.message}`);
                }

                registrarBtn.textContent = 'Registrar Paquete';
                registrarBtn.disabled = false;
            });
        }
    }

    function initializeAllScanners() {
        let ocrStream;
        let ocrWorker;
        let html5QrcodeScanner;
        let currentOcrTargetInput;

        const ocrScannerModal = document.getElementById('ocr-scanner-modal');
        const openOcrBtns = document.querySelectorAll('.scan-ocr-btn');
        const closeOcrBtn = document.getElementById('close-ocr-btn');
        const captureBtn = document.getElementById('capture-ocr-btn');
        const videoFeed = document.getElementById('video-feed');
        const ocrStatus = document.getElementById('ocr-status');
        
        const barcodeScannerModal = document.getElementById('barcode-scanner-modal');
        const openBarcodeBtn = document.getElementById('scan-tracking-barcode-btn');
        const closeBarcodeBtn = document.getElementById('close-barcode-btn');

        const startOcrCamera = async (targetInputId) => {
            currentOcrTargetInput = document.getElementById(targetInputId);
            ocrScannerModal.classList.remove('hidden');
            try {
                ocrStream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
                videoFeed.srcObject = ocrStream;
                ocrStatus.textContent = 'Cámara lista. Apunte a la etiqueta y presione "Capturar".';
                captureBtn.disabled = false;
            } catch (err) {
                showAlert("No se pudo acceder a la cámara. Asegúrate de dar los permisos necesarios.");
                stopOcrCamera();
            }
        };

        const stopOcrCamera = () => {
            if (ocrStream) {
                ocrStream.getTracks().forEach(track => track.stop());
            }
            ocrScannerModal.classList.add('hidden');
        };

        const captureAndProcessImage = async () => {
            ocrStatus.textContent = 'Procesando imagen... por favor espere.';
            captureBtn.disabled = true;

            const video = document.getElementById('video-feed');
            const guideBox = document.getElementById('ocr-guide-box');
            const canvas = document.createElement('canvas');

            const videoWidth = video.videoWidth;
            const videoHeight = video.videoHeight;
            const guideRect = guideBox.getBoundingClientRect();
            const videoRect = video.getBoundingClientRect();

            const scaleX = videoWidth / videoRect.width;
            const scaleY = videoHeight / videoRect.height;

            const cropX = (guideRect.left - videoRect.left) * scaleX;
            const cropY = (guideRect.top - videoRect.top) * scaleY;
            const cropWidth = guideRect.width * scaleX;
            const cropHeight = guideRect.height * scaleY;

            canvas.width = cropWidth;
            canvas.height = cropHeight;

            const context = canvas.getContext('2d');
            context.drawImage(video, cropX, cropY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);
            
            ocrWorker = await Tesseract.createWorker('spa');
            const { data: { text } } = await ocrWorker.recognize(canvas.toDataURL('image/jpeg'));
            await ocrWorker.terminate();

            parseOcrText(text);
            stopOcrCamera();
        };
        
        const parseOcrText = (text) => {
            const words = text.replace(/\n/g, ' ').split(' ');
            let found = false;

            if (currentOcrTargetInput.id === 'casillero') {
                for (const word of words) {
                    const client = db.clients.find(c => c.box.toUpperCase() === word.trim().toUpperCase());
                    if (client) {
                        currentOcrTargetInput.value = client.box;
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    const candidate = words.find(w => w.trim().toUpperCase().startsWith('PASC'));
                    currentOcrTargetInput.value = candidate ? candidate.trim() : '';
                    if(!candidate) showAlert("OCR no pudo encontrar un casillero en la etiqueta.");
                }
            } else if (currentOcrTargetInput.id === 'tracking-main') {
                 for (const word of words) {
                    const pkg = db.packages.find(p => p.tracking.toUpperCase() === word.trim().toUpperCase());
                    if (pkg) {
                        currentOcrTargetInput.value = pkg.tracking;
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    const candidate = words.filter(w => w.length > 8).sort((a,b) => b.length - a.length)[0];
                    currentOcrTargetInput.value = candidate ? candidate.trim() : '';
                    if(!candidate) showAlert("OCR no pudo encontrar un tracking en la etiqueta.");
                }
            }
            currentOcrTargetInput.dispatchEvent(new Event('blur'));
        };

        if(openOcrBtns) {
            openOcrBtns.forEach(btn => {
                btn.addEventListener('click', () => startOcrCamera(btn.dataset.target));
            });
        }
        if(closeOcrBtn) closeOcrBtn.addEventListener('click', stopOcrCamera);
        if(captureBtn) captureBtn.addEventListener('click', captureAndProcessImage);
        

        const onBarcodeScanSuccess = (decodedText, decodedResult) => {
            const trackingInput = document.getElementById('tracking-main');
            trackingInput.value = decodedText;
            trackingInput.dispatchEvent(new Event('blur'));
            stopBarcodeScanner();
        };

        const startBarcodeScanner = () => {
            barcodeScannerModal.classList.remove('hidden');
            html5QrcodeScanner = new Html5Qrcode("barcode-reader");
            html5QrcodeScanner.start({ facingMode: "environment" }, { fps: 10, qrbox: { width: 250, height: 250 } }, onBarcodeScanSuccess)
                .catch(err => {
                    showAlert("No se pudo iniciar el escáner de código de barras.");
                    stopBarcodeScanner();
                });
        };

        const stopBarcodeScanner = () => {
            if (html5QrcodeScanner && html5QrcodeScanner.isScanning) {
                html5QrcodeScanner.stop().catch(err => console.error("Error al detener el escáner de código de barras.", err));
            }
            barcodeScannerModal.classList.add('hidden');
        };
        
        if(openBarcodeBtn) openBarcodeBtn.addEventListener('click', startBarcodeScanner);
        if(closeBarcodeBtn) closeBarcodeBtn.addEventListener('click', stopBarcodeScanner);
    }
    
    // El resto de tus funciones 'initialize...' irían aquí...
    // ... initializeRecibirSucursalListeners, initializeCobrarListeners, etc. ...
    // --- LÓGICA DE FORMULARIOS INTERACTIVOS ---
        
        // ** INICIO DEL MÓDULO ACTUALIZADO **

        function initializeRecibirSucursalListeners() {
            const trackingInput = document.getElementById('tracking-sucursal-main');
            if (trackingInput) {
                trackingInput.addEventListener('blur', () => {
                    const trackingValue = trackingInput.value.trim();
                    const pkg = db.packages.find(p => p.tracking === trackingValue);
                    if (pkg) {
                        const client = db.clients.find(c => c.id === pkg.clientId);
                        const infoDisplay = document.getElementById('info-paquete-sucursal');
                        infoDisplay.innerHTML = `
                            <p><span class="font-semibold">Cliente:</span> ${client ? client.name : 'N/A'}</p>
                            <p><span class="font-semibold">Peso:</span> ${pkg.weight} lbs</p>
                            <p><span class="font-semibold">Tracking:</span> ${pkg.tracking}</p>
                        `;
                    }
                });
            }
            // Add listeners for the new buttons
            document.querySelectorAll('.notify-email-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    showAlert('Simulación: Se enviaría un correo electrónico al cliente.');
                });
            });
            document.querySelectorAll('.notify-whatsapp-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const phone = btn.dataset.phone;
                    const text = encodeURIComponent(`Hola, te informamos que tu paquete está listo para retirar.`);
                    window.open(`https://wa.me/507${phone}?text=${text}`, '_blank');
                });
            });
        }

        function initializeCobrarListeners() {
            const searchInputs = document.querySelectorAll('.search-input');
            searchInputs.forEach(input => {
                input.addEventListener('blur', () => {
                    if (Array.from(searchInputs).some(i => i.value.trim() === '12345' || i.value.trim().toLowerCase() === 'juan perez')) {
                        document.getElementById('invoice-section').classList.add('visible');
                        document.getElementById('verification-section').classList.add('visible');
                        document.getElementById('payment-section').classList.add('visible');
                        document.getElementById('final-step-section').classList.add('visible');
                        addInvoiceCheckboxListeners();
                        addPaymentMethod(); // Add one payment method by default
                    }
                });
            });
            
            const verificationInput = document.getElementById('verification-scanner');
            if(verificationInput) {
                verificationInput.addEventListener('keydown', handleVerificationScan);
            }
            
            const addPaymentMethodBtn = document.getElementById('add-payment-method');
            if(addPaymentMethodBtn) {
                addPaymentMethodBtn.addEventListener('click', addPaymentMethod);
            }
        }
        
        function addInvoiceCheckboxListeners() {
            const checkboxes = document.querySelectorAll('#invoice-table input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', recalculateTotal);
            });
            recalculateTotal(); 
        }

        function recalculateTotal() {
            let total = 0;
            const checkboxes = document.querySelectorAll('#invoice-table tbody input[type="checkbox"]:checked');
            checkboxes.forEach(checkbox => {
                const row = checkbox.closest('tr');
                if (row && row.dataset.amount) {
                    total += parseFloat(row.dataset.amount);
                }
            });
            document.getElementById('total-amount').textContent = `$${total.toFixed(2)}`;
        }
        
        function handleVerificationScan(event) {
            if (event.key !== 'Enter') return;
            
            const input = event.target;
            const trackingId = input.value.trim();
            if (!trackingId) return;

            const invoiceTable = document.getElementById('invoice-table');
            const verificationList = document.getElementById('verification-list');

            const packageRow = invoiceTable.querySelector(`tr[data-tracking="${trackingId}"]`);
            const alreadyScanned = verificationList.querySelector(`li[data-tracking="${trackingId}"]`);

            if (packageRow && !alreadyScanned) {
                const amount = packageRow.dataset.amount;
                const newItem = document.createElement('li');
                newItem.dataset.tracking = trackingId;
                newItem.dataset.amount = amount;
                newItem.className = 'flex justify-between items-center bg-slate-100 p-2 rounded-md';
                newItem.innerHTML = `<span>${trackingId}</span><span class="font-semibold">$${amount}</span>`;
                verificationList.appendChild(newItem);
                input.value = '';
                updatePaymentSummary();
            } else {
                input.classList.add('animate-pulse', 'border-red-500');
                setTimeout(() => input.classList.remove('animate-pulse', 'border-red-500'), 500);
            }
        }
        
        function addPaymentMethod() {
            const container = document.getElementById('dynamic-payment-methods');
            const newPaymentRow = document.createElement('div');
            newPaymentRow.className = 'flex items-center gap-2 payment-method-row';
            newPaymentRow.innerHTML = `
                <select class="payment-type w-full p-2 border border-slate-300 rounded-md">
                    <option>Efectivo</option>
                    <option>Yappy</option>
                    <option>Tarjeta</option>
                    <option>ACH</option>
                    <option>Puntos</option>
                    <option>Tarjeta Regalo</option>
                </select>
                <input type="number" placeholder="$0.00" class="payment-input w-full p-2 border border-slate-300 rounded-md">
                <button class="remove-payment-method text-slate-400 hover:text-red-500 text-2xl font-bold">&times;</button>
            `;
            container.appendChild(newPaymentRow);
            newPaymentRow.querySelector('.payment-input').addEventListener('input', updatePaymentSummary);
            newPaymentRow.querySelector('.remove-payment-method').addEventListener('click', (e) => {
                e.target.closest('.payment-method-row').remove();
                updatePaymentSummary();
            });
        }

        function updatePaymentSummary() {
            let totalAPagar = 0;
            const scannedItems = document.querySelectorAll('#verification-list li');
            scannedItems.forEach(item => {
                totalAPagar += parseFloat(item.dataset.amount);
            });
            
            let totalRecibido = 0;
            const paymentInputs = document.querySelectorAll('.payment-input');
            paymentInputs.forEach(input => {
                totalRecibido += parseFloat(input.value) || 0;
            });

            const balance = totalRecibido - totalAPagar;

            document.getElementById('summary-total-pagar').textContent = `$${totalAPagar.toFixed(2)}`;
            document.getElementById('summary-total-recibido').textContent = `$${totalRecibido.toFixed(2)}`;

            const balanceEl = document.getElementById('summary-balance');
            if (balance < 0) {
                balanceEl.innerHTML = `<span class="font-semibold text-amber-600">Saldo Pendiente:</span> <span class="text-amber-600 font-bold">$${Math.abs(balance).toFixed(2)}</span>`;
            } else {
                 balanceEl.innerHTML = `<span class="font-semibold text-emerald-600">Cambio a Entregar:</span> <span class="text-emerald-600 font-bold">$${balance.toFixed(2)}</span>`;
            }
        }
        
        function initializeModal(openBtnId, modalId, closeBtnClass) {
            const openBtn = document.getElementById(openBtnId);
            const modal = document.getElementById(modalId);
            const closeBtns = document.querySelectorAll(`.${closeBtnClass}`);
            if (openBtn && modal) {
                openBtn.addEventListener('click', () => modal.classList.remove('hidden'));
                closeBtns.forEach(btn => {
                    btn.addEventListener('click', () => modal.classList.add('hidden'));
                });
            }
        }

        function initializeClientesListeners() {
            initializeFilterToggle();
            initializeModal('add-client-btn', 'add-client-modal', 'close-modal');
        }

        function initializeUsuariosListeners() {
            initializeModal('add-user-btn', 'add-user-modal', 'close-modal');
        }

        function initializeSucursalesListeners() {
            initializeModal('add-sucursal-btn', 'add-sucursal-modal', 'close-modal');
            document.querySelectorAll('.manage-anaqueles-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const sucursalId = e.currentTarget.dataset.id;
                    window.location.hash = `/sucursales/${sucursalId}`;
                });
            });
        }

        function initializeAnaquelesListeners(sucursalId) {
            // Lógica para agregar y eliminar anaqueles
        }
        
        function initializeFilterToggle() {
            const toggleButton = document.getElementById('toggle-filters-btn');
            const filtersDiv = document.getElementById('advanced-filters');
            if (toggleButton && filtersDiv) {
                toggleButton.addEventListener('click', () => {
                    filtersDiv.classList.toggle('visible');
                });
            }
        }

        function initializeNotificacionesListeners() {
            const mainTabs = document.querySelectorAll('.main-tab-btn');
            const mainTabContents = document.querySelectorAll('.main-tab-content');
            const templateTabs = document.querySelectorAll('.tab-btn');
            const templateTabContents = document.querySelectorAll('.tab-content');
            const actionsPanels = document.querySelectorAll('.actions-panel');

            function switchMainTab(target) {
                mainTabs.forEach(tab => {
                    if (tab.dataset.target === target) {
                        tab.classList.add('border-emerald-500', 'text-emerald-600');
                        tab.classList.remove('border-transparent', 'text-slate-500');
                    } else {
                        tab.classList.remove('border-emerald-500', 'text-emerald-600');
                        tab.classList.add('border-transparent', 'text-slate-500');
                    }
                });
                mainTabContents.forEach(content => {
                    content.style.display = content.id === `main-tab-${target}` ? 'block' : 'none';
                });
            }

            function switchTemplateTab(target) {
                templateTabs.forEach(tab => {
                    if (tab.dataset.target === target) {
                        tab.classList.add('border-emerald-500', 'text-emerald-600');
                        tab.classList.remove('border-transparent', 'text-slate-500');
                    } else {
                        tab.classList.remove('border-emerald-500', 'text-emerald-600');
                        tab.classList.add('border-transparent', 'text-slate-500');
                    }
                });
                templateTabContents.forEach(content => {
                    content.style.display = content.id === `tab-${target}` ? 'block' : 'none';
                });
                actionsPanels.forEach(panel => {
                    panel.style.display = panel.id === `actions-${target}` ? 'block' : 'none';
                });
            }

            mainTabs.forEach(tab => {
                tab.addEventListener('click', () => switchMainTab(tab.dataset.target));
            });
            
            templateTabs.forEach(tab => {
                tab.addEventListener('click', () => switchTemplateTab(tab.dataset.target));
            });

            // Inicializar
            switchMainTab('editor');
            switchTemplateTab('llegada');

            // Lógica para copiar variables
            document.querySelectorAll('.variable-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const variableText = btn.textContent;
                    const textArea = document.createElement("textarea");
                    textArea.value = variableText;
                    document.body.appendChild(textArea);
                    textArea.select();
                    try {
                        document.execCommand('copy');
                        const originalText = btn.textContent;
                        btn.textContent = '¡Copiado!';
                        setTimeout(() => { btn.textContent = originalText; }, 1500);
                    } catch (err) {
                        console.error('No se pudo copiar el texto: ', err);
                    }
                    document.body.removeChild(textArea);
                });
            });
        }

    // --- PLANTILLAS DE VISTAS (FUNCIONES RENDER) ---
    // Aquí van todas tus funciones renderDashboard, renderRecibirPaquete, etc.
    // No necesitan cambios, ya que leen del objeto `db` que ahora se carga dinámicamente.
    // ... pégalas aquí sin modificarlas ...

            // --- PLANTILLAS DE VISTAS ---

        function renderDashboard() {
            return `
                <div class="flex justify-between items-center mb-8">
                    <h1 class="text-3xl font-bold text-slate-900 flex items-center"><span class="code">[OP-01]</span>Dashboard</h1>
                    <div class="flex items-center gap-2">
                        <span class="text-sm text-slate-500">Hoy: ${new Date().toLocaleDateString('es-ES', { day: 'numeric', month: 'long', year: 'numeric'})}</span>
                    </div>
                </div>
                
                <div class="mb-10">
                    <h2 class="text-lg font-semibold text-slate-700 mb-4 flex items-center"><span class="code">[OP-01A]</span>Acceso Rápido</h2>
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <button onclick="window.location.hash='#/recibir-paquete'" class="flex items-center justify-center gap-3 bg-emerald-500 text-white font-bold py-3 px-4 rounded-lg shadow-lg shadow-emerald-500/20 hover:bg-emerald-600 transition-all transform hover:-translate-y-1">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                            <span>Recibir Paquete</span>
                        </button>
                        <button onclick="window.location.hash='#/recibir-en-sucursal'" class="flex items-center justify-center gap-3 bg-sky-500 text-white font-bold py-3 px-4 rounded-lg shadow-lg shadow-sky-500/20 hover:bg-sky-600 transition-all transform hover:-translate-y-1">
                           <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg>
                            <span>Recibir en Sucursal</span>
                        </button>
                        <button onclick="window.location.hash='#/cobrar'" class="flex items-center justify-center gap-3 bg-indigo-500 text-white font-bold py-3 px-4 rounded-lg shadow-lg shadow-indigo-500/20 hover:bg-indigo-600 transition-all transform hover:-translate-y-1">
                           <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" /></svg>
                            <span>Cobrar y Facturar</span>
                        </button>
                        <button class="flex items-center justify-center gap-3 bg-white text-slate-700 font-bold py-3 px-4 rounded-lg shadow-sm hover:bg-slate-50 transition-all transform hover:-translate-y-1 border border-slate-200">
                             <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-slate-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>
                            <span>Buscar Cliente</span>
                        </button>
                    </div>
                </div>

                <div>
                    <h2 class="text-lg font-semibold text-slate-700 mb-4 flex items-center"><span class="code">[OP-01B]</span>Resumen de Actividad del Día</h2>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="bg-white p-6 rounded-lg border border-slate-200"><h3 class="text-slate-500 font-medium">Paquetes Recibidos Hoy</h3><p class="text-4xl font-bold text-emerald-500 mt-2">124</p></div>
                        <div class="bg-white p-6 rounded-lg border border-slate-200"><h3 class="text-slate-500 font-medium">Paquetes por Entregar</h3><p class="text-4xl font-bold text-amber-500 mt-2">32</p></div>
                        <div class="bg-white p-6 rounded-lg border border-slate-200"><h3 class="text-slate-500 font-medium">Total Cobros del Día</h3><p class="text-4xl font-bold text-slate-800 mt-2">$1,450.75</p></div>
                    </div>
                </div>
            `;
        }
        
        // ** INICIO PLANTILLA ACTUALIZADA **
        function renderRecibirPaquete() {
            return `
                <div class="flex justify-between items-center mb-8">
                    <h1 class="text-3xl font-bold text-slate-900 flex items-center"><span class="code">[OP-03A]</span>Recepción de Paquete</h1>
                </div>
                <div class="bg-white p-8 rounded-lg border border-slate-200 shadow-sm max-w-4xl mx-auto">
                    <div>
                        <label for="tracking-main" class="block text-lg font-semibold text-slate-700 mb-2">1. Tracking Principal</label>
                        <div class="relative flex items-center">
                            <input type="text" id="tracking-main" placeholder="Ingresar o escanear tracking..." class="w-full text-lg pl-4 pr-24 py-3 border-2 border-slate-300 rounded-lg focus:ring-emerald-500 focus:border-emerald-500 transition">
                            <div class="absolute right-2 flex items-center gap-1">
                                <button id="scan-tracking-barcode-btn" class="p-2 text-slate-500 hover:text-indigo-600 rounded-full hover:bg-indigo-100" title="Escanear Código de Barras">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M12 4v1m6 11h2m-6.5 6.5l-1.5-1.5M4 12H2m13.5-6.5l-1.5 1.5M12 20v-1m0-10V4m0 18a9 9 0 110-18 9 9 0 010 18z" /></svg>
                                </button>
                                <button data-target="tracking-main" class="scan-ocr-btn p-2 text-slate-500 hover:text-indigo-600 rounded-full hover:bg-indigo-100" title="Escanear Etiqueta (OCR)">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
                                </button>
                            </div>
                        </div>
                        <div id="weight-info" class="hidden mt-2 text-sm font-semibold text-emerald-600 bg-emerald-50 p-2 rounded-md"></div>
                    </div>
                    
                    <div id="step2" class="form-section">
                        <h2 class="text-lg font-semibold text-slate-700 mb-4">2. Asignar Cliente</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="relative flex items-center">
                                <label for="casillero" class="absolute -top-6 left-0 block text-sm font-medium text-slate-600">Casillero o Nombre</label>
                                <input type="text" id="casillero" placeholder="Buscar por nombre o escanear casillero..." class="w-full p-2 pr-12 border border-slate-300 rounded-md">
                                <button id="scan-casillero-ocr-btn" data-target="casillero" class="scan-ocr-btn absolute right-1 p-2 text-slate-500 hover:text-indigo-600 rounded-full hover:bg-indigo-100" title="Escanear Etiqueta (OCR)">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
                                </button>
                            </div>
                            <div>
                                <label for="cliente" class="block text-sm font-medium text-slate-600 mb-1">Cliente</label>
                                <input type="text" id="cliente" disabled class="w-full p-2 border border-slate-300 rounded-md bg-slate-100">
                            </div>
                            <div class="md:col-span-2">
                                <label for="sucursal" class="block text-sm font-medium text-slate-600 mb-1">Sucursal</label>
                                <div class="flex items-center gap-2">
                                    <span id="sucursal-color-dot" class="h-4 w-4 rounded-full bg-slate-200 transition-colors"></span>
                                    <input type="text" id="sucursal" disabled class="w-full p-2 border border-slate-300 rounded-md bg-slate-100">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="step3" class="form-section">
                        <div class="mt-8">
                            <button class="w-full bg-emerald-500 text-white font-bold py-3 px-4 rounded-lg shadow-lg shadow-emerald-500/20 hover:bg-emerald-600 transition-all">Registrar Paquete</button>
                        </div>
                    </div>
                </div>

                <div id="ocr-scanner-modal" class="fixed inset-0 bg-slate-900/50 backdrop-blur-sm flex items-center justify-center p-4 hidden z-40">
                    <div class="bg-white w-full max-w-lg rounded-lg shadow-xl p-6 relative">
                        <button id="close-ocr-btn" class="absolute top-2 right-2 text-slate-400 hover:text-slate-600 text-3xl font-bold">&times;</button>
                        <h2 class="text-xl font-bold text-slate-800 mb-4">Escanear Etiqueta con Cámara</h2>
                        <div class="relative">
                            <video id="video-feed" autoplay playsinline></video>
                            <div id="ocr-guide-box" class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-10/12 h-12 border-2 border-dashed border-white rounded-lg pointer-events-none"></div>
                        </div>
                        <p id="ocr-status" class="text-sm text-slate-500 mt-2 text-center h-5">Iniciando cámara...</p>
                        <button id="capture-ocr-btn" class="w-full mt-4 bg-indigo-500 text-white font-bold py-3 px-4 rounded-lg shadow-lg shadow-indigo-500/20 hover:bg-indigo-600 transition-all disabled:opacity-50" disabled>Capturar Imagen</button>
                    </div>
                </div>

                <div id="barcode-scanner-modal" class="fixed inset-0 bg-slate-900/50 backdrop-blur-sm flex items-center justify-center p-4 hidden z-40">
                    <div class="bg-white w-full max-w-md rounded-lg shadow-xl p-6 relative">
                        <button id="close-barcode-btn" class="absolute top-2 right-2 text-slate-400 hover:text-slate-600 text-3xl font-bold">&times;</button>
                        <h2 class="text-xl font-bold text-slate-800 mb-4">Escanear Código de Barras</h2>
                        <div id="barcode-reader" class="w-full"></div>
                        <p class="text-xs text-slate-500 mt-4 text-center">Apunte la cámara al código de barras o QR.</p>
                    </div>
                </div>
            `;
        }
        // ** FIN PLANTILLA ACTUALIZADA **
        
        function renderRecibirEnSucursal() {
            const packagesInBranch = db.packages.filter(p => p.status === 'En Sucursal');
            return `
                <h1 class="text-3xl font-bold text-slate-900 flex items-center mb-8"><span class="code">[OP-04A]</span>Recepción en Sucursal</h1>
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <div class="lg:col-span-2">
                        <div class="bg-white p-6 rounded-lg border border-slate-200 shadow-sm">
                              <label for="tracking-sucursal-main" class="block text-lg font-semibold text-slate-700 mb-2">Escanear Paquete</label>
                            <div class="relative">
                  _inner_redacted_content_
            </div>
            
        // --- ROUTER Y SIDEBAR (CONFIGURACIÓN) ---
    const navLinksConfig = {
        operaciones: [
            { href: '#/dashboard', icon: '<path stroke-linecap="round" stroke-linejoin="round" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />', text: 'Dashboard' },
            { href: '#/recibir-paquete', icon: '<path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />', text: 'Recibir Paquete' },
            { href: '#/recibir-en-sucursal', icon: '<path stroke-linecap="round" stroke-linejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />', text: 'Recibir en Sucursal' },
            { href: '#/clientes', icon: '<path stroke-linecap="round" stroke-linejoin="round" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M15 21v-1a6 6 0 00-5.176-5.97M15 21H9" />', text: 'Clientes' },
            { href: '#/paquetes', icon: '<path stroke-linecap="round" stroke-linejoin="round" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />', text: 'Paquetes' },
            { href: '#/sucursales', icon: '<path stroke-linecap="round" stroke-linejoin="round" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />', text: 'Sucursales' },
            { href: '#/cobrar', icon: '<path stroke-linecap="round" stroke-linejoin="round" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />', text: 'Cobrar y Facturar' },
        ],
        administracion: [
            { href: '#/usuarios', icon: '<path stroke-linecap="round" stroke-linejoin="round" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />', text: 'Usuarios y Roles' },
            { href: '#/configuracion', icon: '<path stroke-linecap="round" stroke-linejoin="round" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />', text: 'Configuración' },
            { href: '#/notificaciones', icon: '<path stroke-linecap="round" stroke-linejoin="round" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />', text: 'Notificaciones' },
        ]
    };

    const routes = {
        '/dashboard': { title: 'Dashboard', render: renderDashboard, roles: ['ADMIN', 'SUPERVISOR', 'RECEPCION'] },
        '/recibir-paquete': { title: 'Recibir Paquete', render: renderRecibirPaquete, roles: ['ADMIN', 'RECEPCION'] },
        '/recibir-en-sucursal': { title: 'Recibir en Sucursal', render: renderRecibirEnSucursal, roles: ['ADMIN', 'RECEPCION'] },
        '/clientes': { title: 'Clientes', render: renderClientes, roles: ['ADMIN', 'SUPERVISOR'] },
        '/paquetes': { title: 'Paquetes', render: renderPaquetes, roles: ['ADMIN', 'SUPERVISOR', 'RECEPCION'] },
        '/sucursales': { title: 'Sucursales', render: renderSucursales, roles: ['ADMIN'] },
        '/cobrar': { title: 'Cobrar y Facturar', render: renderCobrar, roles: ['ADMIN', 'RECEPCION'] },
        '/usuarios': { title: 'Usuarios', render: renderUsuarios, roles: ['ADMIN'] },
        '/configuracion': { title: 'Configuración', render: renderConfiguracion, roles: ['ADMIN'] },
        '/notificaciones': { title: 'Notificaciones', render: renderNotificaciones, roles: ['ADMIN'] },
    };
    
    function buildSidebar() {
        if (!session.user) return;
        let navHTML = '<h2 class="text-xs font-semibold text-slate-400 uppercase tracking-wider mb-2 px-4">Operaciones</h2>';
        
        navLinksConfig.operaciones.forEach(link => {
            const routeKey = link.href.slice(2); // remove #/
            const route = routes[`/${routeKey}`];
            if (route && route.roles.includes(session.user.role)) {
                navHTML += `
                    <a href="${link.href}" class="sidebar-link flex items-center gap-3 px-4 py-2 rounded-lg transition-colors hover:bg-slate-100 hover:text-slate-900">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-slate-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">${link.icon}</svg>
                        <span>${link.text}</span>
                    </a>`;
            }
        });

        if (session.user.role === 'ADMIN') {
            navHTML += '<h2 class="text-xs font-semibold text-slate-400 uppercase tracking-wider mt-6 mb-2 px-4 pt-4 border-t">Administración</h2>';
            
            navLinksConfig.administracion.forEach(link => {
                const routeKey = link.href.slice(2);
                const route = routes[`/${routeKey}`];
                if (route && route.roles.includes(session.user.role)) {
                     navHTML += `
                        <a href="${link.href}" class="sidebar-link flex items-center gap-3 px-4 py-2 rounded-lg transition-colors hover:bg-slate-100 hover:text-slate-900">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-slate-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">${link.icon}</svg>
                            <span>${link.text}</span>
                        </a>`;
                }
            });
        }

        mainNavEl.innerHTML = navHTML;
    }

    function router() {
        if (!session.user) {
            mainApp.classList.add('hidden');
            loginScreen.classList.remove('hidden');
            return;
        }
        
        const pathParts = window.location.hash.slice(1).split('/');
        const basePath = `/${pathParts[1] || 'dashboard'}`;
        const param = pathParts[2] || null;
        
        const route = routes[basePath];

        if (route && route.roles.includes(session.user.role)) {
            if (basePath === '/sucursales' && param) {
                contentEl.innerHTML = renderAnaqueles(param);
            } else {
                contentEl.innerHTML = route.render(param);
            }
            document.title = `SGL - ${route.title}`;
            
            document.querySelectorAll('.sidebar-link').forEach(link => {
                const linkPath = link.getAttribute('href').split('/')[1];
                link.classList.toggle('active', `#/${linkPath}` === basePath);
            });
            
            // Ejecutar los listeners específicos de la página después de renderizar
            if (basePath === '/recibir-paquete') initializeRecibirPaqueteListeners();
            if (basePath === '/recibir-en-sucursal') initializeRecibirSucursalListeners();
            if (basePath === '/cobrar') initializeCobrarListeners();
            if (basePath === '/clientes') initializeClientesListeners();
            if (basePath === '/paquetes') initializeFilterToggle();
            if (basePath === '/usuarios') initializeUsuariosListeners();
            if (basePath === '/notificaciones') initializeNotificacionesListeners();
            if (basePath === '/sucursales') {
                if(param) {
                    initializeAnaquelesListeners(param);
                } else {
                    initializeSucursalesListeners();
                }
            }

        } else {
            // Si el rol no permite acceder, redirigir al dashboard
            window.location.hash = '/dashboard';
            router(); // Call router again to render the dashboard
        }
    }
    
    // --- INICIALIZACIÓN ---
    window.addEventListener('hashchange', router);
    
    // Modificamos el evento 'load' para que sea asíncrono
    window.addEventListener('load', async () => {
        if(API_URL.startsWith('¡PEGA AQUÍ')) {
            showAlert("CONFIGURACIÓN NECESARIA: Debes editar el archivo HTML y reemplazar el valor de la constante 'API_URL' con la URL de tu Google Apps Script implementado.");
        } else {
            await loadInitialData(); // ¡Primero cargamos los datos!
        }
        // El router se llama desde el formulario de login después de la carga inicial
    });

</script>
</body>
</html>
